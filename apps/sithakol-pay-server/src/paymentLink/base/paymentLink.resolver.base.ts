/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentLink } from "./PaymentLink";
import { PaymentLinkCountArgs } from "./PaymentLinkCountArgs";
import { PaymentLinkFindManyArgs } from "./PaymentLinkFindManyArgs";
import { PaymentLinkFindUniqueArgs } from "./PaymentLinkFindUniqueArgs";
import { CreatePaymentLinkArgs } from "./CreatePaymentLinkArgs";
import { UpdatePaymentLinkArgs } from "./UpdatePaymentLinkArgs";
import { DeletePaymentLinkArgs } from "./DeletePaymentLinkArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { User } from "../../user/base/User";
import { PaymentLinkWhereUniqueInput } from "./PaymentLinkWhereUniqueInput";
import { PaymentLinkService } from "../paymentLink.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentLink)
export class PaymentLinkResolverBase {
  constructor(
    protected readonly service: PaymentLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentLink",
    action: "read",
    possession: "any",
  })
  async _paymentLinksMeta(
    @graphql.Args() args: PaymentLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentLink])
  @nestAccessControl.UseRoles({
    resource: "PaymentLink",
    action: "read",
    possession: "any",
  })
  async paymentLinks(
    @graphql.Args() args: PaymentLinkFindManyArgs
  ): Promise<PaymentLink[]> {
    return this.service.paymentLinks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentLink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentLink",
    action: "read",
    possession: "own",
  })
  async paymentLink(
    @graphql.Args() args: PaymentLinkFindUniqueArgs
  ): Promise<PaymentLink | null> {
    const result = await this.service.paymentLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentLink)
  @nestAccessControl.UseRoles({
    resource: "PaymentLink",
    action: "create",
    possession: "any",
  })
  async createPaymentLink(
    @graphql.Args() args: CreatePaymentLinkArgs
  ): Promise<PaymentLink> {
    return await this.service.createPaymentLink({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentLink)
  @nestAccessControl.UseRoles({
    resource: "PaymentLink",
    action: "update",
    possession: "any",
  })
  async updatePaymentLink(
    @graphql.Args() args: UpdatePaymentLinkArgs
  ): Promise<PaymentLink | null> {
    try {
      return await this.service.updatePaymentLink({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentLink)
  @nestAccessControl.UseRoles({
    resource: "PaymentLink",
    action: "delete",
    possession: "any",
  })
  async deletePaymentLink(
    @graphql.Args() args: DeletePaymentLinkArgs
  ): Promise<PaymentLink | null> {
    try {
      return await this.service.deletePaymentLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @graphql.Parent() parent: PaymentLink,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: PaymentLink): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => PaymentLink)
  async GetPaymentLinkStatus(
    @graphql.Args()
    args: PaymentLinkWhereUniqueInput
  ): Promise<PaymentLink> {
    return this.service.GetPaymentLinkStatus(args);
  }
}
