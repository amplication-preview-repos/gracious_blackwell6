/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentLink as PrismaPaymentLink,
  Transaction as PrismaTransaction,
  User as PrismaUser,
} from "@prisma/client";

import { PaymentLinkWhereUniqueInput } from "./PaymentLinkWhereUniqueInput";
import { PaymentLink } from "./PaymentLink";

export class PaymentLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentLink.count(args);
  }

  async paymentLinks(
    args: Prisma.PaymentLinkFindManyArgs
  ): Promise<PrismaPaymentLink[]> {
    return this.prisma.paymentLink.findMany(args);
  }
  async paymentLink(
    args: Prisma.PaymentLinkFindUniqueArgs
  ): Promise<PrismaPaymentLink | null> {
    return this.prisma.paymentLink.findUnique(args);
  }
  async createPaymentLink(
    args: Prisma.PaymentLinkCreateArgs
  ): Promise<PrismaPaymentLink> {
    return this.prisma.paymentLink.create(args);
  }
  async updatePaymentLink(
    args: Prisma.PaymentLinkUpdateArgs
  ): Promise<PrismaPaymentLink> {
    return this.prisma.paymentLink.update(args);
  }
  async deletePaymentLink(
    args: Prisma.PaymentLinkDeleteArgs
  ): Promise<PrismaPaymentLink> {
    return this.prisma.paymentLink.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.paymentLink
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.paymentLink
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async GetPaymentLinkStatus(
    args: PaymentLinkWhereUniqueInput
  ): Promise<PaymentLink> {
    throw new Error("Not implemented");
  }
}
